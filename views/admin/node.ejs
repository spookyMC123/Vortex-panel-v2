<%- include('../components/template') %>
<main id="content" class="bg-gradient-to-br from-gray-900 to-gray-800 min-h-screen">
  <div class="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center mb-8">
      <div>
        <h1 class="text-2xl font-bold text-white">Node Configuration</h1>
        <p class="text-sm text-gray-400 mt-1">Manage your node settings and resources</p>
      </div>
      <a href="../nodes" class="inline-flex items-center gap-2 text-sm font-medium text-blue-400 hover:text-blue-300 transition-colors">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
        </svg>
        Back to nodes
      </a>
    </div>

    <div class="bg-gray-800 rounded-xl shadow-2xl overflow-hidden border border-gray-700/50">
      <div class="px-6 py-5 border-b border-gray-700 bg-gradient-to-r from-gray-800 to-gray-800/50">
        <div class="flex items-center gap-3">
          <div class="p-2 rounded-lg bg-blue-500/10 border border-blue-500/20">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01" />
            </svg>
          </div>
          <div>
            <h3 class="text-lg font-semibold text-white">Node Settings</h3>
            <p class="text-sm text-gray-400">Configure your node's basic information and resources</p>
          </div>
        </div>
      </div>

      <div class="px-6 py-5 space-y-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Name Field -->
          <div>
            <label for="nodeName" class="block text-sm font-medium text-gray-300 mb-2 flex items-center gap-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
              </svg>
              Node Name
            </label>
            <div class="relative">
              <input id="nodeName" type="text" class="block w-full bg-gray-700 border border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-blue-500 text-white px-4 py-2.5 placeholder-gray-400 transition-all duration-200" placeholder="e.g. US-East-01" value="<%- node.name %>">
            </div>
          </div>

          <!-- Tags Field -->
          <div>
            <label for="nodeTags" class="block text-sm font-medium text-gray-300 mb-2 flex items-center gap-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
              </svg>
              Tags
            </label>
            <input id="nodeTags" type="text" class="block w-full bg-gray-700 border border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-blue-500 text-white px-4 py-2.5 placeholder-gray-400 transition-all duration-200" placeholder="high-performance, us-east, ssd" value="<%- node.tags %>">
            <p class="mt-1.5 text-xs text-gray-400">Separate tags with commas</p>
          </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- RAM Field -->
          <div>
            <label for="nodeRam" class="block text-sm font-medium text-gray-300 mb-2 flex items-center gap-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z" />
              </svg>
              RAM Allocation
            </label>
            <div class="relative">
              <input id="nodeRam" type="number" class="block w-full bg-gray-700 border border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-blue-500 text-white px-4 py-2.5 pr-12 placeholder-gray-400 transition-all duration-200" placeholder="8" value="<%- node.ram %>">
              <div class="absolute inset-y-0 right-0 flex items-center pr-4 pointer-events-none">
                <span class="text-gray-400 text-sm">GB</span>
              </div>
            </div>
          </div>

          <!-- Disk Field -->
          <div>
            <label for="nodeDisk" class="block text-sm font-medium text-gray-300 mb-2 flex items-center gap-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
              </svg>
              Disk Allocation
            </label>
            <div class="relative">
              <input id="nodeDisk" type="number" class="block w-full bg-gray-700 border border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-blue-500 text-white px-4 py-2.5 pr-12 placeholder-gray-400 transition-all duration-200" placeholder="40" value="<%- node.disk %>">
              <div class="absolute inset-y-0 right-0 flex items-center pr-4 pointer-events-none">
                <span class="text-gray-400 text-sm">GB</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Processor Field -->
        <div>
          <label for="nodeProcessor" class="block text-sm font-medium text-gray-300 mb-2 flex items-center gap-1">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z" />
            </svg>
            Processor Information
          </label>
          <input id="nodeProcessor" type="text" class="block w-full bg-gray-700 border border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-blue-500 text-white px-4 py-2.5 placeholder-gray-400 transition-all duration-200" placeholder="e.g. AMD EPYC 9454 - 16 Threads" value="<%- node.processor %>">
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Address Field -->
          <div>
            <label for="nodeAddress" class="block text-sm font-medium text-gray-300 mb-2 flex items-center gap-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z" />
              </svg>
              IP Address / Hostname
            </label>
            <input id="nodeAddress" type="text" class="block w-full bg-gray-700 border border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-blue-500 text-white px-4 py-2.5 placeholder-gray-400 transition-all duration-200" placeholder="192.168.1.1 or node.example.com" value="<%- node.address %>">
          </div>

          <!-- Port Field -->
          <div>
            <label for="nodePort" class="block text-sm font-medium text-gray-300 mb-2 flex items-center gap-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
              </svg>
              Daemon Port
            </label>
            <input id="nodePort" type="number" class="block w-full bg-gray-700 border border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-blue-500 text-white px-4 py-2.5 placeholder-gray-400 transition-all duration-200" placeholder="8080" value="<%- node.port %>">
          </div>
        </div>

        <!-- API Key Field -->
        <div>
          <label for="nodeApiKey" class="block text-sm font-medium text-gray-300 mb-2 flex items-center gap-1">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
            </svg>
            Access Key
          </label>
          <div class="relative">
            <input id="nodeApiKey" type="text" class="block w-full bg-gray-700 border border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-blue-500 text-white px-4 py-2.5 pr-20 placeholder-gray-400 transition-all duration-200" placeholder="daemon_xxxxxxxxxxxxxxxx" value="<%- node.apiKey %>">
            <div class="absolute inset-y-0 right-0 flex items-center pr-3">
              <button type="button" class="text-blue-400 hover:text-blue-300 text-sm font-medium flex items-center gap-1 transition-colors" onclick="generateApiKey()">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Generate
              </button>
            </div>
          </div>
          <p class="mt-1.5 text-xs text-gray-400">This key must match the one in your daemon configuration</p>
        </div>
      </div>

      <div class="px-6 py-4 bg-gray-800/50 border-t border-gray-700 flex justify-end">
        <button id="saveNodeBtn" type="button" class="inline-flex items-center px-5 py-2.5 border border-transparent text-sm font-medium rounded-lg shadow-sm text-white bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-500 hover:to-blue-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200">
          Save Changes
        </button>
      </div>
    </div>
  </div>
</main>

<script>
  // Generate a random API key
  function generateApiKey() {
    const prefix = 'daemon_';
    const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
    let result = prefix;

    for (let i = 0; i < 16; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }

    document.getElementById('nodeApiKey').value = result;

    // Show a small toast notification
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg text-sm flex items-center gap-2 animate-fade-in';
    toast.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
      </svg>
      New API key generated
    `;
    document.body.appendChild(toast);

    setTimeout(() => {
      toast.classList.add('animate-fade-out');
      setTimeout(() => toast.remove(), 300);
    }, 3000);
  }

  document.getElementById('saveNodeBtn').addEventListener('click', function() {
    const name = document.getElementById('nodeName').value;
    const tags = document.getElementById('nodeTags').value.split(',').map(tag => tag.trim());
    const ram = document.getElementById('nodeRam').value;
    const disk = document.getElementById('nodeDisk').value;
    const processor = document.getElementById('nodeProcessor').value;
    const address = document.getElementById('nodeAddress').value;
    const port = document.getElementById('nodePort').value;
    const apiKey = document.getElementById('nodeApiKey').value;

    const nodeData = {
      name, 
      tags, 
      ram: parseInt(ram), 
      disk: parseInt(disk), 
      processor, 
      address, 
      port: parseInt(port), 
      apiKey
    };

    // Show loading state
    const btn = document.getElementById('saveNodeBtn');
    btn.disabled = true;
    btn.innerHTML = `
      <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      Saving...
    `;

    fetch('/admin/node/<%- node.id %>', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(nodeData)
    })
    .then(response => {
      if (response.ok) {
        return response.json();
      }
      throw new Error('Failed to edit node');
    })
    .then(data => {
      // Show success notification
      showNotification('Node updated successfully!', 'success');
      setTimeout(() => {
        window.location.href = '../nodes?err=EDITED';
      }, 1500);
    })
    .catch(error => {
      console.error('Error editing node:', error);
      showNotification('Failed to update node: ' + error.message, 'error');
      btn.disabled = false;
      btn.innerHTML = 'Save Changes';
    });
  });

  function showNotification(message, type = 'info') {
    const colors = {
      success: 'bg-green-600',
      error: 'bg-red-600',
      info: 'bg-blue-600'
    };

    const icon = {
      success: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />`,
      error: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />`,
      info: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />`
    };

    const notification = document.createElement('div');
    notification.className = `fixed bottom-4 right-4 ${colors[type]} text-white px-4 py-2 rounded-lg shadow-lg text-sm flex items-center gap-2 animate-fade-in`;
    notification.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        ${icon[type]}
      </svg>
      ${message}
    `;
    document.body.appendChild(notification);

    setTimeout(() => {
      notification.classList.add('animate-fade-out');
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }
</script>

<style>
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  @keyframes fadeOut {
    from { opacity: 1; transform: translateY(0); }
    to { opacity: 0; transform: translateY(10px); }
  }

  .animate-fade-in {
    animation: fadeIn 0.3s ease-out forwards;
  }

  .animate-fade-out {
    animation: fadeOut 0.3s ease-in forwards;
  }

  input:focus {
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25);
  }
</style>
<%- include('../components/footer') %>