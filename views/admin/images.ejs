<%- include('../components/admin_template') %>
<main id="content" class="pb-20">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Header Section -->
    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 py-6">
      <div>
        <h1 class="text-2xl font-bold text-white"><%= req.translations.images %></h1>
      </div>
      <button id="uploadimage" class="flex items-center gap-2 rounded-lg bg-indigo-600 hover:bg-indigo-500 px-4 py-2 text-sm font-medium text-white shadow transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:ring-offset-gray-900">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
        </svg>
        <%= req.translations.importImage %>
      </button>
    </div>

    <!-- Main Content - Table View -->
    <div id="nodeTable" class="bg-gray-800/50 rounded-xl border border-gray-700 overflow-hidden">
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-700">
          <thead class="bg-gray-800">
            <tr>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider"><%= req.translations.name %></th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider hidden sm:table-cell"><%= req.translations.author %></th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider hidden md:table-cell"><%= req.translations.dockerImage %></th>
              <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider"><%= req.translations.actions %></th>
            </tr>
          </thead>
          <tbody class="bg-gray-800/50 divide-y divide-gray-700">
            <% if (images.length === 0) { %>
              <tr>
                <td colspan="4" class="px-6 py-4 text-center text-sm text-gray-400">
                  <%= req.translations.noImagesFound %>
                </td>
              </tr>
            <% } %>
            <% images.forEach(function(image) { %>
            <tr class="image-row hover:bg-gray-700/50 transition-colors duration-150" data-image='<%= JSON.stringify(image) %>'>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                  <div class="flex-shrink-0 h-10 w-10 flex items-center justify-center rounded-md bg-indigo-500/20 text-indigo-400">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                  </div>
                  <div class="ml-4">
                    <div class="text-sm font-medium text-white"><%= image.Name %></div>
                    <div class="text-xs text-gray-400 sm:hidden"><%= image.Author %></div>
                  </div>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-400 hidden sm:table-cell">
                <div class="flex items-center">
                  <span class="truncate"><%= image.Author %> (<%= image.AuthorName %>)</span>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-400 hidden md:table-cell">
                <div class="flex items-center">
                  <span class="font-mono truncate max-w-xs"><%= image.Image %></span>
                </div>
              </td>
              <td class="py-4 pl-0 pr-4 sm:table-cell sm:pr-8">
                <div class="flex gap-x-3">
                  <div onclick="deleteImage('<%= image.Id %>')" class="block rounded-xl bg-green-600 px-3 py-2 text-center text-sm font-medium text-white shadow-lg hover:bg-green-500 transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                    select
                  </div>
                </div>
              </td>
            </tr>
            <% }); %>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Image Detail View (Hidden by default) -->
    <div id="imageDetail" class="hidden mt-6">
      <button id="backButton" class="flex items-center gap-2 text-gray-400 hover:text-white transition-colors duration-200 mb-6">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
        </svg>
        <%= req.translations.back %>
      </button>

      <div class="bg-gray-800/50 rounded-xl border border-gray-700 p-6">
        <div class="flex flex-col md:flex-row gap-6">
          <!-- Image Preview/Icon -->
          <div class="flex-shrink-0">
            <div class="h-24 w-24 rounded-lg bg-indigo-500/20 flex items-center justify-center text-indigo-400">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
            </div>
          </div>

          <!-- Image Details -->
          <div class="flex-1">
            <h2 id="imageName" class="text-2xl font-bold text-white"></h2>
            <p id="imageDescription" class="mt-2 text-gray-400"></p>

            <div class="mt-4 flex flex-wrap gap-2">
              <span id="dockerImage" class="inline-flex items-center px-3 py-1 rounded-full text-xs font-mono bg-gray-700 text-gray-300"></span>
              <span id="envVars" class="inline-flex items-center px-3 py-1 rounded-full text-xs font-mono bg-gray-700 text-gray-300"></span>
            </div>

            <div class="mt-4">
              <h3 class="text-sm font-medium text-gray-300"><%= req.translations.author %></h3>
              <p id="authorInfo" class="mt-1 text-sm text-gray-400"></p>
            </div>

            <div class="mt-6 flex flex-wrap gap-3">
              <button id="deleteImageButton" class="flex items-center gap-2 rounded-lg bg-red-600 hover:bg-red-500 px-4 py-2 text-sm font-medium text-white shadow transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-gray-900">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                </svg>
                <%= req.translations.imageDelete %>
              </button>
              <button id="replaceImageButton" class="flex items-center gap-2 rounded-lg bg-gray-700 hover:bg-gray-600 px-4 py-2 text-sm font-medium text-white shadow transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 focus:ring-offset-gray-900">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                </svg>
                <%= req.translations.imageReplace %>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>

<script>
document.addEventListener("DOMContentLoaded", function() {
  // Elements
  const uploadBtn = document.getElementById('uploadimage');
  const imageRows = document.querySelectorAll('.image-row');
  const nodeTable = document.getElementById('nodeTable');
  const imageDetail = document.getElementById('imageDetail');
  const backButton = document.getElementById('backButton');
  const imageName = document.getElementById('imageName');
  const imageDescription = document.getElementById('imageDescription');
  const dockerImage = document.getElementById('dockerImage');
  const envVars = document.getElementById('envVars');
  const authorInfo = document.getElementById('authorInfo');
  const deleteImageButton = document.getElementById('deleteImageButton');
  const replaceImageButton = document.getElementById('replaceImageButton');

  let currentImage = null;

  // Upload Image Functionality
  uploadBtn.addEventListener('click', function() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';

    input.addEventListener('change', function(event) {
      const file = event.target.files[0];
      if (!file) return;

      // Validate file type
      if (file.type !== 'application/json' && !file.name.endsWith('.json')) {
        showToast('<%= req.translations.jsonSelectFile %>', 'error');
        return;
      }

      const reader = new FileReader();
      reader.onload = function(event) {
        try {
          // Validate JSON
          JSON.parse(event.target.result);

          uploadImage(event.target.result)
            .then(() => {
              showToast('<%= req.translations.imageUploadSuccess %>', 'success');
              setTimeout(() => window.location.reload(), 1000);
            })
            .catch(error => {
              console.error('Error uploading image:', error);
              showToast('<%= req.translations.imageUploadError %>', 'error');
            });
        } catch (e) {
          showToast('<%= req.translations.invalidJsonFile %>', 'error');
        }
      };
      reader.onerror = () => {
        showToast('<%= req.translations.fileReadError %>', 'error');
      };
      reader.readAsText(file);
    });

    input.click();
  });

  // Image row click handlers
  imageRows.forEach(row => {
    row.addEventListener('click', function() {
      currentImage = JSON.parse(this.dataset.image);
      displayImageDetails(currentImage);
      nodeTable.classList.add('hidden');
      imageDetail.classList.remove('hidden');

      // Smooth scroll to top for mobile
      window.scrollTo({ top: 0, behavior: 'smooth' });
    });
  });

  // Back button
  backButton.addEventListener('click', function() {
    nodeTable.classList.remove('hidden');
    imageDetail.classList.add('hidden');
  });

  // Delete button
  deleteImageButton.addEventListener('click', function() {
    if (!currentImage) return;

    showConfirmationDialog(
      '<%= req.translations.confirmDeleteTitle %>',
      `<%= req.translations.confirmDeleteMessage %> "${currentImage.Name}"?`,
      () => {
        deleteImage(currentImage.Id)
          .then(() => {
            showToast('<%= req.translations.imageDeleteSuccess %>', 'success');
            setTimeout(() => window.location.reload(), 1000);
          })
          .catch(error => {
            console.error('Error deleting image:', error);
            showToast('<%= req.translations.imageDeleteError %>', 'error');
          });
      }
    );
  });

  // Replace button
  replaceImageButton.addEventListener('click', function() {
    if (!currentImage) return;

    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';

    input.addEventListener('change', function(event) {
      const file = event.target.files[0];
      if (!file) return;

      // Validate file type
      if (file.type !== 'application/json' && !file.name.endsWith('.json')) {
        showToast('<%= req.translations.jsonSelectFile %>', 'error');
        return;
      }

      const reader = new FileReader();
      reader.onload = function(event) {
        try {
          // Validate JSON
          JSON.parse(event.target.result);

          showConfirmationDialog(
            '<%= req.translations.confirmReplaceTitle %>',
            `<%= req.translations.confirmReplaceMessage %> "${currentImage.Name}"?`,
            () => {
              Promise.all([
                uploadImage(event.target.result),
                deleteImage(currentImage.Id)
              ])
              .then(() => {
                showToast('<%= req.translations.imageReplaceSuccess %>', 'success');
                setTimeout(() => window.location.reload(), 1000);
              })
              .catch(error => {
                console.error('Error replacing image:', error);
                showToast('<%= req.translations.imageReplaceError %>', 'error');
              });
            }
          );
        } catch (e) {
          showToast('<%= req.translations.invalidJsonFile %>', 'error');
        }
      };
      reader.onerror = () => {
        showToast('<%= req.translations.fileReadError %>', 'error');
      };
      reader.readAsText(file);
    });

    input.click();
  });

  // Helper functions
  function displayImageDetails(image) {
    imageName.textContent = image.Name;
    imageDescription.textContent = image.Description || '<%= req.translations.noDescription %>';
    dockerImage.textContent = image.Image;
    envVars.textContent = image.Env ? image.Env.join(', ') : '<%= req.translations.noEnvVars %>';
    authorInfo.textContent = `${image.Author}${image.AuthorName ? ` (${image.AuthorName})` : ''}`;
  }

  function uploadImage(jsonData) {
    return new Promise((resolve, reject) => {
      const xhr = new XMLHttpRequest();
      xhr.open('POST', '/admin/images/upload', true);
      xhr.setRequestHeader('Content-Type', 'application/json');

      xhr.onload = function() {
        if (xhr.status === 200) {
          resolve(xhr.response);
        } else {
          reject(new Error(xhr.statusText));
        }
      };

      xhr.onerror = function() {
        reject(new Error('Network error'));
      };

      xhr.send(jsonData);
    });
  }

  function deleteImage(id) {
    return new Promise((resolve, reject) => {
      const xhr = new XMLHttpRequest();
      xhr.open('POST', '/admin/images/delete', true);
      xhr.setRequestHeader('Content-Type', 'application/json');

      xhr.onload = function() {
        if (xhr.status === 200) {
          resolve(xhr.response);
        } else {
          reject(new Error(xhr.statusText));
        }
      };

      xhr.onerror = function() {
        reject(new Error('Network error'));
      };

      xhr.send(JSON.stringify({ id }));
    });
  }

  function showToast(message, type = 'info') {
    // Remove existing toasts
    const existingToasts = document.querySelectorAll('.toast');
    existingToasts.forEach(toast => toast.remove());

    const colors = {
      success: 'bg-green-600',
      error: 'bg-red-600',
      info: 'bg-blue-600',
      warning: 'bg-yellow-600'
    };

    const toast = document.createElement('div');
    toast.className = `toast fixed bottom-4 right-4 ${colors[type]} text-white px-4 py-2 rounded-lg shadow-lg flex items-center gap-2 animate-fade-in`;
    toast.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
      </svg>
      <span>${message}</span>
    `;

    document.body.appendChild(toast);

    setTimeout(() => {
      toast.classList.add('animate-fade-out');
      setTimeout(() => toast.remove(), 300);
    }, 5000);
  }

  function showConfirmationDialog(title, message, onConfirm) {
    const dialog = document.createElement('div');
    dialog.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4';
    dialog.innerHTML = `
      <div class="bg-gray-800 rounded-xl border border-gray-700 p-6 max-w-md w-full animate-scale-in">
        <h3 class="text-lg font-medium text-white mb-2">${title}</h3>
        <p class="text-gray-400 mb-6">${message}</p>
        <div class="flex justify-end gap-3">
          <button id="confirmCancel" class="px-4 py-2 rounded-lg bg-gray-700 hover:bg-gray-600 text-white transition-colors">
            <%= req.translations.cancel %>
          </button>
          <button id="confirmOk" class="px-4 py-2 rounded-lg bg-red-600 hover:bg-red-500 text-white transition-colors">
            <%= req.translations.confirm %>
          </button>
        </div>
      </div>
    `;

    document.body.appendChild(dialog);

    dialog.querySelector('#confirmCancel').addEventListener('click', () => {
      dialog.classList.add('animate-scale-out');
      setTimeout(() => dialog.remove(), 300);
    });

    dialog.querySelector('#confirmOk').addEventListener('click', () => {
      onConfirm();
      dialog.classList.add('animate-scale-out');
      setTimeout(() => dialog.remove(), 300);
    });
  }
});

// Prevent event bubbling for delete buttons in table rows
function deleteImage(id, event) {
  if (event) event.stopPropagation();

  showConfirmationDialog(
    '<%= req.translations.confirmDeleteTitle %>',
    '<%= req.translations.confirmDeleteMessage %>',
    () => {
      fetch('/admin/images/delete', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ id })
      })
      .then(response => {
        if (response.ok) {
          showToast('<%= req.translations.imageDeleteSuccess %>', 'success');
          setTimeout(() => window.location.reload(), 1000);
        } else {
          throw new Error('Delete failed');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showToast('<%= req.translations.imageDeleteError %>', 'error');
      });
    }
  );
}
</script>

<style>
.animate-fade-in {
  animation: fadeIn 0.3s ease-out forwards;
}

.animate-fade-out {
  animation: fadeOut 0.3s ease-out forwards;
}

.animate-scale-in {
  animation: scaleIn 0.2s ease-out forwards;
}

.animate-scale-out {
  animation: scaleOut 0.2s ease-out forwards;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes fadeOut {
  from { opacity: 1; transform: translateY(0); }
  to { opacity: 0; transform: translateY(10px); }
}

@keyframes scaleIn {
  from { opacity: 0; transform: scale(0.95); }
  to { opacity: 1; transform: scale(1); }
}

@keyframes scaleOut {
  from { opacity: 1; transform: scale(1); }
  to { opacity: 0; transform: scale(0.95); }
}

/* Mobile responsive adjustments */
@media (max-width: 640px) {
  .container {
    padding-left: 1rem;
    padding-right: 1rem;
  }

  table {
    display: block;
    width: 100%;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }

  .image-detail-container {
    padding: 1rem;
  }
}
</style>