<%- include('../components/template') %>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/xterm.min.js"
    integrity="sha512-2PRgAav8Os8vLcOAh1gSaDoNLe1fAyq8/G3QSdyjFFD+OqNjLeHE/8q4+S4MEZgPsuo+itHopj+hJvqS8XUQ8A=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/xterm.min.css"
    integrity="sha512-iLYuqv+v/P4u9erpk+KM83Ioe/l7SEmr7wB6g+Kg1qmEit8EShDKnKtLHlv2QXUp7GGJhmqDI+1PhJYLTsfb8w=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/addons/attach/attach.min.js"
    integrity="sha512-43J76SR5UijcuJTzs73z8NpkyWon8a8EoV+dX6obqXW7O26Yb268H2vP6EiJjD7sWXqxS3G/YOqPyyLF9fmqgA=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/addons/fit/fit.min.js"
    integrity="sha512-+wh8VA1djpWk3Dj9/IJDu6Ufi4vVQ0zxLv9Vmfo70AbmYFJm0z3NLnV98vdRKBdPDV4Kwpi7EZdr8mDY9L8JIA=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>

<style>
    /* Base styles */
    .card {
        background: rgba(255, 255, 255, 0.03);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.05);
        transition: all 0.3s ease;
    }

    .card:hover {
        border-color: rgba(255, 255, 255, 0.1);
    }

    .terminal-container {
        min-height: 400px;
        background: rgba(0, 0, 0, 0.25);
        border-radius: 12px;
        border: 1px solid rgba(255, 255, 255, 0.05);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }

    .xterm-viewport {
        overflow-y: hidden !important;
        border-radius: 8px;
    }

    /* Buttons & Interactions */
    .btn {
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        transform-origin: center;
    }

    .btn-primary {
        background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .btn-primary:hover {
        background: linear-gradient(135deg, #5a5fef 0%, #7c4dff 100%);
        transform: translateY(-1px);
        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
    }

    .btn-primary:active {
        transform: translateY(0);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .power-btn {
        transition: all 0.2s ease;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.05);
    }

    .power-btn:hover {
        background: rgba(255, 255, 255, 0.1);
        transform: scale(0.95);
    }

    /* Stats cards */
    .stat-card {
        transition: all 0.3s ease;
        background: rgba(255, 255, 255, 0.03);
        border: 1px solid rgba(255, 255, 255, 0.05);
    }

    .stat-card:hover {
        background: rgba(255, 255, 255, 0.05);
        transform: translateY(-2px);
    }

    .progress-bar {
        height: 6px;
        border-radius: 3px;
    }

    .progress-fill {
        transition: width 0.5s ease;
    }

    /* Animations */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .fade-in {
        animation: fadeIn 0.3s ease forwards;
    }

    @keyframes fadeOut {
        from { opacity: 1; }
        to { opacity: 0; height: 0; padding: 0; margin: 0; }
    }

    .fade-out {
        animation: fadeOut 0.3s ease forwards;
    }

    /* Custom scrollbar */
    ::-webkit-scrollbar {
        width: 6px;
        height: 6px;
    }

    ::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.05);
    }

    ::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
    }

    ::-webkit-scrollbar-thumb:hover {
        background: rgba(255, 255, 255, 0.2);
    }

    /* Input field */
    .input-field {
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        transition: all 0.3s ease;
    }

    .input-field:focus {
        outline: none;
        border-color: rgba(99, 102, 241, 0.5);
        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);
    }

    /* Status indicators */
    .status-online {
        color: #10b981;
        text-shadow: 0 0 8px rgba(16, 185, 129, 0.3);
    }

    .status-offline {
        color: #ef4444;
    }

    .status-starting {
        color: #f59e0b;
        animation: pulse 2s infinite;
    }

    @keyframes pulse {
        0% { opacity: 0.6; }
        50% { opacity: 1; }
        100% { opacity: 0.6; }
    }
</style>

<script>
    function showAlert(type, title, message) {
        const alertContainer = document.getElementById('alert-container');
        const alertElement = document.createElement('div');
        alertElement.className = `p-4 rounded-xl mb-3 flex items-start ${type === 'error' ? 'bg-red-600/90' : 'bg-emerald-600/90'} text-white fade-in`;
        alertElement.innerHTML = `
            <div class="flex-shrink-0 mt-0.5">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                </svg>
            </div>
            <div class="ml-3">
                <h3 class="text-sm font-medium">${title}</h3>
                <p class="mt-1 text-sm opacity-90">${message}</p>
            </div>
        `;
        alertContainer.appendChild(alertElement);
        setTimeout(() => {
            alertElement.classList.add('fade-out');
            setTimeout(() => alertContainer.removeChild(alertElement), 300);
        }, 5000);
    }

    const eulaPopupHTML = `
        <div id="eula-popup" class="fixed inset-0 bg-black/70 backdrop-blur-sm hidden items-center justify-center z-50 p-4">
          <div class="bg-gradient-to-br from-gray-900 to-gray-800 p-6 rounded-xl shadow-2xl max-w-md w-full border border-gray-800">
            <div class="flex items-center mb-4">
                <div class="bg-indigo-500/10 p-2 rounded-lg mr-3">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                    </svg>
                </div>
                <h2 class="text-xl font-bold text-white">Minecraft EULA</h2>
            </div>
            <p class="text-gray-300 mb-6 text-sm">By continuing, you agree to the Minecraft End User License Agreement (EULA). You must accept the EULA to run this server.</p>
            <div class="flex justify-end space-x-3">
              <button id="decline-eula" class="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors duration-200">
                Decline
              </button>
              <button id="accept-eula" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-500 text-white rounded-lg transition-colors duration-200 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
                Accept
              </button>
            </div>
          </div>
        </div>
    `;

    document.body.insertAdjacentHTML('beforeend', eulaPopupHTML);

    function showEulaPopup() {
        const popup = document.getElementById('eula-popup');
        popup.classList.remove('hidden');
        popup.classList.add('flex');
    }

    function hideEulaPopup() {
        const popup = document.getElementById('eula-popup');
        popup.classList.add('hidden');
        popup.classList.remove('flex');
    }

    document.getElementById('accept-eula').addEventListener('click', acceptEula);
    document.getElementById('decline-eula').addEventListener('click', hideEulaPopup);

    async function acceptEula() {
        const instanceId = "<%= req.params.id %>" || '';
        try {
            await fetch(`/instance/<%= req.params.id %>/imagefeatures/eula`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'text/plain',
                }
            });

            hideEulaPopup();
            showAlert('success', 'EULA Accepted', 'The Minecraft EULA has been accepted. You can now start your server.');
        } catch (error) {
            console.error('Error accepting EULA:', error);
            showAlert('error', 'EULA Acceptance Failed', 'An error occurred while accepting the EULA. Please try again.');
        }
    }
</script>

<main class="flex-grow container mx-auto px-4 py-8 transition-all">
    <%- include('../components/instance') %>
    <% if (Array.isArray(files) && files.length > 0 && !files.some(file => file.name === 'eula.txt')) { %>
        <% if (instance.imageData.features && instance.imageData.features.includes('eula')) { %>
            <script>
                document.addEventListener('DOMContentLoaded', () => {
                    showEulaPopup();
                });
            </script>
        <% } %>
    <% } %>

    <% if (instance.Image == "ghcr.io/hydrenoffical/hydravm:latest") { %>
      <div id="alert-container" class="mb-4 p-4 rounded-xl bg-indigo-600/90 text-white fade-in">
        <div class="flex items-start">
            <div class="flex-shrink-0 mt-0.5">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
            </div>
            <div class="ml-3">
                <h3 class="text-sm font-medium">Ubuntu 22.04 VM</h3>
                <p class="mt-1 text-sm opacity-90">You're running an Ubuntu 22.04 VM. Default credentials: <span class="font-mono bg-black/20 px-1.5 py-0.5 rounded">root:root</span></p>
            </div>
        </div>
      </div>
    <% } else { %>
      <div id="alert-container" class="mb-4 space-y-3"></div>
    <% } %>

    <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
        <div class="lg:col-span-3 space-y-6">
            <!-- Console Card -->
            <div class="card rounded-xl p-6">
                <div class="flex items-center justify-between mb-4">
                    <div>
                        <h2 class="text-xl font-semibold text-white">Server Console</h2>
                        <p class="text-gray-400 text-sm mt-1">Execute commands and monitor server activity in real-time</p>
                    </div>
                    <div class="flex items-center space-x-2">
                        <button onclick="clearTerminal()" class="text-xs bg-white/5 hover:bg-white/10 border border-white/10 px-3 py-1.5 rounded-lg transition flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                            Clear
                        </button>
                    </div>
                </div>

                <div class="border-t border-white/5 pt-4">
                    <div id="terminal" class="terminal-container p-4 rounded-xl mb-4"></div>

                    <div class="flex items-center gap-3">
                        <div class="relative flex-grow">
                            <input type="text" 
                                   id="console-input" 
                                   class="input-field w-full p-3 pr-12 text-white rounded-lg placeholder-gray-400/70" 
                                   placeholder="Enter command..." 
                                   required>
                            <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none text-gray-400">
                                <span class="text-xs">ENTER</span>
                            </div>
                        </div>

                        <button onclick="sendCommand()" 
                                class="btn btn-primary flex items-center gap-2 text-white font-medium py-3 px-5 rounded-lg">
                            <span>Send</span>
                            <svg xmlns="http://www.w3.org/2000/svg" 
                                 fill="none" 
                                 viewBox="0 0 24 24" 
                                 stroke-width="1.5" 
                                 stroke="currentColor" 
                                 class="w-5 h-5">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Stats Cards -->
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                <div id="cpuUsageContainer" class="stat-card rounded-xl p-5">
                    <div class="flex items-center justify-between mb-3">
                        <h3 class="text-sm font-medium text-white/80">CPU Usage</h3>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-400 opacity-60" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2z" />
                        </svg>
                    </div>
                    <div class="w-full bg-gray-700 rounded-full progress-bar">
                        <div id="cpuProgressBar" class="bg-gradient-to-r from-indigo-500 to-purple-500 h-full rounded-full progress-fill" style="width: 0%;"></div>
                    </div>
                    <span id="cpuUsage" class="text-xs font-medium mt-3 block text-center text-gray-300"></span>
                </div>

                <div id="ramUsageContainer" class="stat-card rounded-xl p-5">
                    <div class="flex items-center justify-between mb-3">
                        <h3 class="text-sm font-medium text-white/80">Memory Usage</h3>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-400 opacity-60" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z" />
                        </svg>
                    </div>
                    <div class="w-full bg-gray-700 rounded-full progress-bar">
                        <div id="ramProgressBar" class="bg-gradient-to-r from-indigo-500 to-purple-500 h-full rounded-full progress-fill" style="width: 0%;"></div>
                    </div>
                    <span id="ramUsage" class="text-xs font-medium mt-3 block text-center text-gray-300"></span>
                </div>

                <div id="diskUsageContainer" class="stat-card rounded-xl p-5">
                    <div class="flex items-center justify-between mb-3">
                        <h3 class="text-sm font-medium text-white/80">Disk Usage</h3>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-400 opacity-60" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
                        </svg>
                    </div>
                    <div class="w-full bg-gray-700 rounded-full progress-bar">
                        <div id="diskProgressBar" class="bg-gradient-to-r from-indigo-500 to-purple-500 h-full rounded-full progress-fill" style="width: 0%;"></div>
                    </div>
                    <span id="diskUsage" class="text-xs font-medium mt-3 block text-center text-gray-300"></span>
                </div>

                <div class="stat-card rounded-xl p-5">
                    <div class="flex items-center justify-between mb-3">
                        <h3 class="text-sm font-medium text-white/80">Network</h3>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-400 opacity-60" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z" />
                        </svg>
                    </div>
                    <div class="w-full bg-gray-700 rounded-full progress-bar">
                        <div class="bg-gradient-to-r from-indigo-500 to-purple-500 h-full rounded-full progress-fill" style="width: 0%;"></div>
                    </div>
                    <span id="networkUsage" class="text-xs font-medium mt-3 block text-center text-gray-300">Coming Soon</span>
                </div>
            </div>
        </div>

        <!-- Sidebar -->
        <div class="space-y-6">
            <!-- Server Control Card -->
            <div class="card rounded-xl p-6">
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-xl font-semibold text-white" id="server-name-card"><%= instance.Name %></h2>
                    <span id="status" class="status-offline text-xs font-semibold px-2.5 py-1 rounded-full bg-red-500/10">OFFLINE</span>
                </div>

                <!-- Power Controls -->
                <div class="grid grid-cols-4 gap-2 mb-6">
                    <button id="startButton" class="power-btn h-12 flex flex-col items-center justify-center rounded-lg transition" title="Start Server">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6 text-emerald-400">
                            <path fill-rule="evenodd" d="M4.5 5.653c0-1.427 1.529-2.33 2.779-1.643l11.54 6.347c1.295.712 1.295 2.573 0 3.286L7.28 19.99c-1.25.687-2.779-.217-2.779-1.643V5.653Z" clip-rule="evenodd" />
                        </svg>
                        <span class="text-xs mt-1 text-gray-300">Start</span>
                    </button>

                    <button id="restartButton" class="power-btn h-12 flex flex-col items-center justify-center rounded-lg transition" title="Restart Server">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6 text-amber-400">
                            <path fill-rule="evenodd" d="M4.755 10.059a7.5 7.5 0 0 1 12.548-3.364l1.903 1.903h-3.183a.75.75 0 1 0 0 1.5h4.992a.75.75 0 0 0 .75-.75V4.356a.75.75 0 0 0-1.5 0v3.18l-1.9-1.9A9 9 0 0 0 3.306 9.67a.75.75 0 1 0 1.45.388Zm15.408 3.352a.75.75 0 0 0-.919.53 7.5 7.5 0 0 1-12.548 3.364l-1.902-1.903h3.183a.75.75 0 0 0 0-1.5H2.984a.75.75 0 0 0-.75.75v4.992a.75.75 0 0 0 1.5 0v-3.18l1.9 1.9a9 9 0 0 0 15.059-4.035.75.75 0 0 0-.53-.918Z" clip-rule="evenodd" />
                        </svg>
                        <span class="text-xs mt-1 text-gray-300">Restart</span>
                    </button>

                    <button id="stopButton" class="power-btn h-12 flex flex-col items-center justify-center rounded-lg transition" title="Stop Server">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6 text-red-400">
                            <path fill-rule="evenodd" d="M4.5 7.5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-9a3 3 0 0 1-3-3v-9Z" clip-rule="evenodd" />
                        </svg>
                        <span class="text-xs mt-1 text-gray-300">Stop</span>
                    </button>

                    <button onclick="window.location.href='/instance/<%= req.params.id %>/settings'" class="power-btn h-12 flex flex-col items-center justify-center rounded-lg transition" title="Server Settings">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-blue-400">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12a7.5 7.5 0 0 0 15 0m-15 0a7.5 7.5 0 1 1 15 0m-15 0H3m16.5 0H21m-1.5 0H12m-8.457 3.077 1.41-.513m14.095-5.13 1.41-.513M5.106 17.785l1.15-.964m11.49-9.642 1.15-.964M7.501 19.795l.75-1.3m7.5-12.99l.75-1.3m-6.063 16.658.26-1.477m2.605-14.772.26-1.477m0 17.726-.26-1.477M10.698 4.614l-.26-1.477M16.5 19.794l-.75-1.299M7.5 4.205 12 12m6.894 5.785-1.149-.964M6.256 7.178l-1.15-.964m15.352 8.864-1.41-.513M4.954 9.435l-1.41-.514M12.002 12l-3.75 6.495" />
                        </svg>
                        <span class="text-xs mt-1 text-gray-300">Players</span>
                    </button>
                </div>

                <!-- Server Info -->
                <div class="space-y-3 text-sm">
                    <div class="flex items-center text-gray-400">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 mr-2 text-indigo-400">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M5.25 14.25h13.5m-13.5 0a3 3 0 0 1-3-3m3 3a3 3 0 1 0 0 6h13.5a3 3 0 1 0 0-6m-16.5-3a3 3 0 0 1 3-3h13.5a3 3 0 0 1 3 3m-19.5 0a4.5 4.5 0 0 1 .9-2.7L5.737 5.1a3.375 3.375 0 0 1 2.7-1.35h7.126c1.062 0 2.062.5 2.7 1.35l2.587 3.45a4.5 4.5 0 0 1 .9 2.7m0 0a3 3 0 0 1-3 3m0 3h.008v.008h-.008v-.008Zm0-6h.008v.008h-.008v-.008Zm-3 6h.008v.008h-.008v-.008Zm0-6h.008v.008h-.008v-.008Z" />
                        </svg>
                        <span id="node">Node: <%= instance.Node.name %></span>
                    </div>

                    <div class="flex items-center text-gray-400">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 mr-2 text-indigo-400">
                            <path stroke-linecap="round" stroke-linejoin="round" d="m7.875 14.25 1.214 1.942a2.25 2.25 0 0 0 1.908 1.058h2.006c.776 0 1.497-.4 1.908-1.058l1.214-1.942M2.41 9h4.636a2.25 2.25 0 0 1 1.872 1.002l.164.246a2.25 2.25 0 0 0 1.872 1.002h2.092a2.25 2.25 0 0 0 1.872-1.002l.164-.246A2.25 2.25 0 0 1 16.954 9h4.636M2.41 9a2.25 2.25 0 0 0-.16.832V12a2.25 2.25 0 0 0 2.25 2.25h15A2.25 2.25 0 0 0 21.75 12V9.832c0-.287-.055-.57-.16-.832M2.41 9a2.25 2.25 0 0 1 .382-.632l3.285-3.832a2.25 2.25 0 0 1 1.708-.786h8.43c.657 0 1.281.287 1.709.786l3.284 3.832c.163.19.291.404.382.632M4.5 20.25h15A2.25 2.25 0 0 0 21.75 18v-2.625c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125V18a2.25 2.25 0 0 0 2.25 2.25Z" />
                        </svg>
                        <span id="image">IP: <%= instance.Node.address %>
                    </div>

                    <div class="flex items-center text-gray-400">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 mr-2 text-indigo-400">
                          <path stroke-linecap="round" stroke-linejoin="round" d="M12 21a9.004 9.004 0 0 0 8.716-6.747M12 21a9.004 9.004 0 0 1-8.716-6.747M12 21c2.485 0 4.5-4.03 4.5-9S14.485 3 12 3m0 18c-2.485 0-4.5-4.03-4.5-9S9.515 3 12 3m0 0a8.997 8.997 0 0 1 7.843 4.582M12 3a8.997 8.997 0 0 0-7.843 4.582m15.686 0A11.953 11.953 0 0 1 12 10.5c-2.998 0-5.74-1.1-7.843-2.918m15.686 0A8.959 8.959 0 0 1 21 12c0 .778-.099 1.533-.284 2.253m0 0A17.919 17.919 0 0 1 12 16.5c-3.162 0-6.133-.815-8.716-2.247m0 0A9.015 9.015 0 0 1 3 12c0-1.605.42-3.113 1.157-4.418" />
                        </svg>
                        <span id="ip">Port: <%= instance.Primary %></span>
                    </div>
                </div>
            </div>

            <!-- Quick Actions Card -->
            <div class="card rounded-xl p-6">
                <h3 class="text-lg font-semibold text-white mb-4">Quick Actions</h3>
                <div class="grid grid-cols-2 gap-3">
                    <button onclick="window.location.href='/instance/<%= req.params.id %>/files'" class="flex items-center justify-center p-3 bg-white/5 hover:bg-white/10 rounded-lg transition">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mr-2 text-indigo-400">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 9.776c.112-.017.227-.026.344-.026h15.812c.117 0 .232.009.344.026m-16.5 0a2.25 2.25 0 0 0-1.883 2.542l.857 6a2.25 2.25 0 0 0 2.227 1.932H19.05a2.25 2.25 0 0 0 2.227-1.932l.857-6a2.25 2.25 0 0 0-1.883-2.542m-16.5 0V6A2.25 2.25 0 0 1 6 3.75h3.879a1.5 1.5 0 0 1 1.06.44l2.122 2.12a1.5 1.5 0 0 0 1.06.44H18A2.25 2.25 0 0 1 20.25 9v.776" />
                        </svg>
                        File Manager
                    </button>
                    <button onclick="window.location.href='/instance/<%= req.params.id %>/archives'" class="flex items-center justify-center p-3 bg-white/5 hover:bg-white/10 rounded-lg transition">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mr-2 text-indigo-400">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
                        </svg>
                        Backups
                    </button>
                    <button onclick="window.location.href='/instance/<%= req.params.id %>/plugins'" class="flex items-center justify-center p-3 bg-white/5 hover:bg-white/10 rounded-lg transition">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mr-2 text-indigo-400">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m3.75 9v6m3-3H9m1.5-12H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
                        </svg>
                        Plugins
                    </button>
                    <button onclick="window.location.href='/instance/<%= req.params.id %>/users'" class="flex items-center justify-center p-3 bg-white/5 hover:bg-white/10 rounded-lg transition">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mr-2 text-indigo-400">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.324.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 011.37.49l1.296 2.247a1.125 1.125 0 01-.26 1.431l-1.003.827c-.293.24-.438.613-.431.992a6.759 6.759 0 010 .255c-.007.378.138.75.43.99l1.005.828c.424.35.534.954.26 1.43l-1.298 2.247a1.125 1.125 0 01-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.57 6.57 0 01-.22.128c-.331.183-.581.495-.644.869l-.213 1.28c-.09.543-.56.941-1.11.941h-2.594c-.55 0-1.02-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 01-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 01-1.369-.49l-1.297-2.247a1.125 1.125 0 01.26-1.431l1.004-.827c.292-.24.437-.613.43-.992a6.932 6.932 0 010-.255c.007-.378-.138-.75-.43-.99l-1.004-.828a1.125 1.125 0 01-.26-1.43l1.297-2.247a1.125 1.125 0 011.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.087.22-.128.332-.183.582-.495.644-.869l.214-1.281z" />
                            <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                        Subusers
                    </button>
                </div>
            </div>
        </div>
    </div>
</main>

<script>
    const baseTheme = {
        foreground: '#c5c9d1',
        background: 'rgba(0 0 0 / 0)',
        selection: '#5DA5D533',
        black: '#1E1E1D',
        brightBlack: '#262625',
        red: '#E54B4B',
        green: '#9ECE58',
        yellow: '#FAED70',
        blue: '#396FE2',
        magenta: '#BB80B3',
        cyan: '#2DDAFD',
        white: '#d0d0d0',
        brightBlack: 'rgba(255, 255, 255, 0.2)',
        brightRed: '#FF5370',
        brightGreen: '#C3E88D',
        brightYellow: '#FFCB6B',
        brightBlue: '#82AAFF',
        brightMagenta: '#C792EA',
        brightCyan: '#89DDFF',
        brightWhite: '#ffffff',
    };

    const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';
    const instanceId = '<%= req.params.id %>';
    const maxCommands = 10;
    let commandHistory = [];
    let currentCommandIndex = -1;
    let term;
    let ws;

    function initWebSocket() {
        const port = window.location.port ? `:${window.location.port}` : '';
        ws = new WebSocket(`${protocol}://${window.location.hostname}${port}/console/${instanceId}`);
        initStatsWebSocket();
        ws.onopen = () => console.log('WebSocket connected!');
        ws.onmessage = handleWebSocketMessage;
        ws.onclose = () => {
            console.log('WebSocket connection closed, attempting to reconnect...');
            setTimeout(initWebSocket, 1000);
        };
        ws.onerror = (error) => {
            console.log('WebSocket encountered an error:', error, 'Attempting to reconnect...');
            setTimeout(initWebSocket, 1000);
        };
    }

    function handleWebSocketMessage(msg) {
        const lines = msg.data.split('\n');
        let isFirstLine = true;
        let previousLineWasEmpty = false;

        lines.forEach(line => {
            const trimmedLine = line.trim();
            if (trimmedLine === '' && previousLineWasEmpty) return;

            if (!isFirstLine && !previousLineWasEmpty) {
                term.write('\r\n');
            }

            term.write('\x1b[0m' + trimmedLine);

            if (trimmedLine.includes("state:")) {
                term.write('\r\n\u001b[1m\u001b[33m[PANEL] \u001b[0mreconnecting socket, hold on...\r\n');
                term.clear();
                ws.close();
            }

            const instancestartedmessage = "<%= instance.imageData.StartedMessage %>" || 'For help, type "help"';
            if (trimmedLine.includes(instancestartedmessage)) {
                term.write('\n\u001b[1m\u001b[33mcontainer@hydra~ \u001b[0mServer marked as Started\r\n');
                updateStatus({ memory_stats: { usage: 100 * 1024 * 1024 } }); // Simulate online status
            }

            if (trimmedLine.includes("Container not found")) {
                window.location.href = '/instances?err=CONTAINER_NOT_FOUND'
            } 

            let alertShown = false;
            if (trimmedLine.includes("Daemon instance appears to be down")) {
                if (!alertShown) {
                    showAlert('error', 'Node Connection Failed', 'Unable to establish a connection with the node. Please check the network or server status and try again.');
                    alertShown = true;
                }
                ws.close();
            }

            isFirstLine = false;
            previousLineWasEmpty = (trimmedLine === '');
        });
    }

    function clearTerminal() {
        if (term) {
            term.clear();
            term.write('\u001b[1m\u001b[33m[PANEL] \u001b[0mTerminal cleared\r\n');
        }
    }

    function setupTerminal() {
        term = new Terminal({
            disableStdin: true,
            allowProposedApi: true,
            cursorStyle: 'underline',
            rows: 20,
            cols: 100,
            fontFamily: 'Menlo, monospace',
            theme: baseTheme,
            allowTransparency: true,
            fontSize: 12,
            lineHeight: 1.0,
        });

        const terminalContainer = document.getElementById('terminal');
        term.open(terminalContainer);

        const originalWrite = term.write.bind(term);
        term.write = (data) => {
            const lines = data.split(/\r?\n/);
            const isAdmin = "<%= req.user.admin %>";
            const filteredData = lines
                .filter(line => isAdmin || !line.includes("Unpacking"))
                .join('\r\n');
            originalWrite(filteredData);
        };
    }

    function sendCommand() {
        const inputElement = document.getElementById('console-input');
        const command = inputElement.value.trim();
        if (command && ws) {
            ws.send(JSON.stringify({
                event: 'cmd',
                command: command,
                containerId: instanceId
            }));

            if (commandHistory.length === maxCommands) {
                commandHistory.shift();
            }
            commandHistory.push(command);
            currentCommandIndex = commandHistory.length;

            inputElement.value = '';
        }
    }

    function handleKeyUp(event) {
        const input = document.getElementById('console-input');

        if (event.key === 'ArrowUp') {
            if (currentCommandIndex > 0) {
                currentCommandIndex--;
                input.value = commandHistory[currentCommandIndex];
            }
            event.preventDefault();
        } else if (event.key === 'ArrowDown') {
            if (currentCommandIndex < commandHistory.length - 1) {
                currentCommandIndex++;
                input.value = commandHistory[currentCommandIndex];
            } else {
                currentCommandIndex = commandHistory.length;
                input.value = '';
            }
            event.preventDefault();
        } else if (event.key === 'Enter') {
            const command = input.value.trim();
            if (command) {
               sendCommand()
            }
            event.preventDefault();
        }
    }

    function initStatsWebSocket() {
        const statsWs = new WebSocket(`${protocol}://${window.location.hostname}:${window.location.port}/stats/${instanceId}`);

        statsWs.onmessage = event => {
            const stats = JSON.parse(event.data);
            if (stats.error) {
                console.error('Error fetching stats:', stats.error);
                return;
            }

            updateRamUsage(stats);
            updateCpuUsage(stats);
            updateDiskUsage(stats);
            updateStatus(stats);
        };
    }

    function formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }

    function updateRamUsage(stats) {
        const ramStatsUsage = stats.memory_stats.usage || 0;
        const ramStatsLimit = stats.memory_stats.limit || 0;

        const ramUsageRaw = ramStatsUsage / 1024 / 1024 || 0;
        const ramLimitRaw = ramStatsLimit / 1024 / 1024 || 0;
        const ramUsagePercent = (ramLimitRaw > 0) ? ((ramUsageRaw / ramLimitRaw) * 100).toFixed(2) : '0.00';

        document.getElementById('ramUsage').textContent = `${ramUsagePercent}% (${formatBytes(ramStatsUsage)} / ${formatBytes(ramStatsLimit)})`;
        const ramProgressBar = document.getElementById('ramProgressBar');
        ramProgressBar.style.width = ramUsagePercent + '%';

        const ramUsageContainer = document.getElementById('ramUsageContainer');
        if (ramUsagePercent >= 90) {
            ramUsageContainer.classList.add('bg-red-500/10');
            ramProgressBar.classList.remove('from-indigo-500', 'to-purple-500');
            ramProgressBar.classList.add('from-red-500', 'to-rose-500');
        } else {
            ramUsageContainer.classList.remove('bg-red-500/10');
            ramProgressBar.classList.remove('from-red-500', 'to-rose-500');
            ramProgressBar.classList.add('from-indigo-500', 'to-purple-500');
        }
    }

    function updateCpuUsage(stats) {
        const cpuDelta = stats.cpu_stats.cpu_usage.total_usage - stats.precpu_stats.cpu_usage.total_usage;
        const systemCpuDelta = stats.cpu_stats.system_cpu_usage - stats.precpu_stats.system_cpu_usage;
        let cpuUsagePercent = ((cpuDelta / systemCpuDelta) * 100).toFixed(2);

        if (isNaN(cpuUsagePercent)) {
            cpuUsagePercent = 0;
        }

        const total_cpu = '<%= instance.Cpu %>' + '00';
        document.getElementById('cpuUsage').textContent = `${cpuUsagePercent}% / ${total_cpu}%`;

        const cpuUsageContainer = document.getElementById('cpuUsageContainer');
        const cpuProgressbar = document.getElementById('cpuProgressBar');
        cpuProgressbar.style.width = cpuUsagePercent + '%';

        if (parseFloat(cpuUsagePercent) >= 90) {
            cpuUsageContainer.classList.add('bg-red-500/10');
            cpuProgressbar.classList.remove('from-indigo-500', 'to-purple-500');
            cpuProgressbar.classList.add('from-red-500', 'to-rose-500');
        } else {
            cpuUsageContainer.classList.remove('bg-red-500/10');
            cpuProgressbar.classList.remove('from-red-500', 'to-rose-500');
            cpuProgressbar.classList.add('from-indigo-500', 'to-purple-500');
        }
    }

    function updateDiskUsage(stats) {
        const diskUsageRaw = parseFloat(stats.volumeSize);
        const diskLimitRaw = <%= instance.Disk %> * 1024 || 10 * 1024; 
        const diskUsagePercent = (diskUsageRaw / diskLimitRaw * 100).toFixed(2);

        document.getElementById('diskUsage').textContent = `${diskUsagePercent}% (${formatBytes(diskUsageRaw * 1024 * 1024)} / ${formatBytes(diskLimitRaw * 1024 * 1024)})`;

        const diskUsageContainer = document.getElementById('diskUsageContainer');
        const diskProgressbar = document.getElementById('diskProgressBar');
        diskProgressbar.style.width = diskUsagePercent + '%';

        if (parseFloat(diskUsagePercent) >= 90) {
            diskUsageContainer.classList.add('bg-red-500/10');
            diskProgressbar.classList.remove('from-indigo-500', 'to-purple-500');
            diskProgressbar.classList.add('from-red-500', 'to-rose-500');
        } else {
            diskUsageContainer.classList.remove('bg-red-500/10');
            diskProgressbar.classList.remove('from-red-500', 'to-rose-500');
            diskProgressbar.classList.add('from-indigo-500', 'to-purple-500');
        }
    }

    function updateStatus(stats) {
        const statusElement = document.getElementById('status');
        const ramUsageRaw = stats.memory_stats.usage / 1024 / 1024 || 0;

        if (ramUsageRaw > 1) {
            statusElement.textContent = 'ONLINE';
            statusElement.className = 'status-online text-xs font-semibold px-2.5 py-1 rounded-full bg-emerald-500/10';
        } else {
            statusElement.textContent = 'OFFLINE';
            statusElement.className = 'status-offline text-xs font-semibold px-2.5 py-1 rounded-full bg-red-500/10';
        }
    }

    // Power actions
    ['start', 'stop', 'restart'].forEach(action => {
        document.getElementById(`${action}Button`).addEventListener('click', function () {
            if (ws) {
                if (action === 'stop') {
                    ws.send(JSON.stringify({
                        event: 'cmd',
                        command: '<%= instance.imageData.StopCommand %>' || 'stop',
                        containerId: instanceId
                    }));
                } else if (action === 'restart') {
                    ws.send(JSON.stringify({
                        event: `power:restart`,
                        containerId: instanceId
                    }));
                } else {
                    ws.send(JSON.stringify({
                        event: `power:${action}`,
                        containerId: instanceId
                    }));
                }

                showAlert('success', 'Action Executed', `Server ${action} command sent. Please wait...`);

                // Update status to "starting" immediately
                if (action === 'start' || action === 'restart') {
                    const statusElement = document.getElementById('status');
                    statusElement.textContent = 'STARTING';
                    statusElement.className = 'status-starting text-xs font-semibold px-2.5 py-1 rounded-full bg-amber-500/10';
                }

                ws.close();
            }

            const friendlyMessages = {
                "Checking server disk space usage, this could take a few seconds...": 
                    "\u001b[1m\u001b[33m > [Panel]\x1b[0m Performing container disk usage checks...",
                "Updating process configuration files...": 
                    "\u001b[1m\u001b[33m > [Panel]\x1b[0m Updating environment...",
                "Ensuring file permissions are set correctly, this could take a few seconds...": 
                    "\u001b[1m\u001b[33m > [Panel]\x1b[0m Performing file permission checks...",
                "Pulling Docker container image, this could take a few minutes to complete...": 
                    "\u001b[1m\u001b[33m > [Panel]\x1b[0m Fetching Docker image...",
                "Finished pulling Docker container image": 
                    "\u001b[1m\u001b[33m > [Panel]\x1b[0m Completed Docker image pull!"
            };

            if (action === 'start') {
                term.clear();
                for (let message in friendlyMessages) {
                    term.write(friendlyMessages[message] + '\r\n');
                }
            }
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        setupTerminal();
        initWebSocket();

        const inputElement = document.getElementById('console-input');
        inputElement.addEventListener('keypress', function (event) {
            if (event.key === 'Enter') {
                sendCommand();
            }
        });

        inputElement.addEventListener('keydown', handleKeyUp);
        initStatsWebSocket();
    });
</script>

<%- include('../components/footer') %>