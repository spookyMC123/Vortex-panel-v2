<%- include('../components/template') %>
<style>
  /* Modern, clean styling for the plugin manager */
  :root {
    --primary-color: #6366f1;
    --primary-hover: #4f46e5;
    --secondary-color: #1e293b;
    --text-primary: #f8fafc;
    --text-secondary: #94a3b8;
    --bg-primary: #0f172a;
    --bg-secondary: #1e293b;
    --border-color: #334155;
    --success-color: #10b981;
    --warning-color: #f59e0b;
    --error-color: #ef4444;
  }

  /* Base styles */
  .plugin-manager-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 1.5rem;
    color: var(--text-primary);
  }

  /* Header styles */
  .plugin-header {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 2rem;
  }

  @media (min-width: 768px) {
    .plugin-header {
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
    }
  }

  .plugin-title {
    font-size: 1.75rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
  }

  /* Search input */
  .search-input {
    width: 100%;
    padding: 0.75rem 1rem;
    background-color: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    color: var(--text-primary);
    font-size: 1rem;
    transition: all 0.2s ease;
  }

  .search-input:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
  }

  .search-input::placeholder {
    color: var(--text-secondary);
  }

  /* Plugin grid */
  .plugin-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  /* Plugin card */
  .plugin-card {
    background-color: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 0.75rem;
    overflow: hidden;
    transition: all 0.2s ease;
    display: flex;
    flex-direction: column;
  }

  .plugin-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    border-color: var(--primary-color);
  }

  .plugin-card-content {
    padding: 1.5rem;
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .plugin-card-header {
    display: flex;
    align-items: flex-start;
    margin-bottom: 1rem;
  }

  .plugin-icon {
    width: 48px;
    height: 48px;
    border-radius: 0.5rem;
    object-fit: cover;
    margin-right: 1rem;
    flex-shrink: 0;
  }

  .plugin-name {
    font-size: 1.125rem;
    font-weight: 600;
    margin: 0;
    color: var(--text-primary);
    word-break: break-word;
  }

  .plugin-author {
    font-size: 0.875rem;
    color: var(--text-secondary);
    margin-top: 0.25rem;
  }

  .plugin-meta {
    display: flex;
    align-items: center;
    margin-top: 0.5rem;
    gap: 0.75rem;
  }

  .plugin-rating {
    display: flex;
    align-items: center;
    font-size: 0.875rem;
    color: var(--warning-color);
  }

  .plugin-downloads {
    display: flex;
    align-items: center;
    font-size: 0.875rem;
    color: var(--text-secondary);
  }

  .plugin-description {
    margin-top: 1rem;
    font-size: 0.9375rem;
    color: var(--text-secondary);
    line-height: 1.5;
    flex: 1;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .plugin-actions {
    display: flex;
    gap: 0.75rem;
    margin-top: 1.5rem;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.625rem 1rem;
    border-radius: 0.5rem;
    font-size: 0.9375rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
    border: none;
    flex: 1;
  }

  .btn-primary {
    background-color: var(--primary-color);
    color: white;
  }

  .btn-primary:hover {
    background-color: var(--primary-hover);
  }

  .btn-secondary {
    background-color: var(--bg-primary);
    color: var(--text-primary);
    border: 1px solid var(--border-color);
  }

  .btn-secondary:hover {
    background-color: var(--bg-secondary);
  }

  .btn-icon {
    margin-right: 0.5rem;
  }

  /* Loading state */
  .loading-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem;
    grid-column: 1 / -1;
  }

  .loading-spinner {
    width: 3rem;
    height: 3rem;
    border: 4px solid rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    border-top-color: var(--primary-color);
    animation: spin 1s linear infinite;
    margin-bottom: 1.5rem;
  }

  .loading-text {
    color: var(--text-secondary);
    font-size: 1.125rem;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  /* Pagination */
  .pagination {
    display: flex;
    justify-content: center;
    margin-top: 2rem;
  }

  .load-more-btn {
    background-color: var(--primary-color);
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    font-weight: 500;
    transition: all 0.2s ease;
    border: none;
    cursor: pointer;
  }

  .load-more-btn:hover {
    background-color: var(--primary-hover);
    transform: translateY(-2px);
  }

  .load-more-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  /* Modal styles */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.7);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }

  .modal-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  .modal-content {
    background-color: var(--bg-primary);
    border-radius: 0.75rem;
    width: 90%;
    max-width: 500px;
    max-height: 90vh;
    overflow-y: auto;
    transform: translateY(20px);
    transition: transform 0.3s ease;
    border: 1px solid var(--border-color);
  }

  .modal-overlay.active .modal-content {
    transform: translateY(0);
  }

  .modal-header {
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .modal-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
  }

  .modal-close {
    background: none;
    border: none;
    color: var(--text-secondary);
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0.25rem;
  }

  .modal-body {
    padding: 1.5rem;
  }

  .progress-container {
    margin-bottom: 1.5rem;
  }

  .progress-bar {
    height: 8px;
    background-color: var(--bg-secondary);
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 0.5rem;
  }

  .progress-fill {
    height: 100%;
    background-color: var(--primary-color);
    width: 0;
    transition: width 0.3s ease;
  }

  .progress-text {
    font-size: 0.875rem;
    color: var(--text-secondary);
    text-align: center;
  }

  /* Toast notification */
  .toast {
    position: fixed;
    bottom: 1.5rem;
    right: 1.5rem;
    background-color: var(--success-color);
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    display: flex;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  .toast.show {
    opacity: 1;
    transform: translateY(0);
  }

  .toast-icon {
    margin-right: 0.5rem;
  }

  /* Empty state */
  .empty-state {
    grid-column: 1 / -1;
    text-align: center;
    padding: 3rem;
    color: var(--text-secondary);
  }

  .empty-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    color: var(--border-color);
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .plugin-grid {
      grid-template-columns: 1fr;
    }
    
    .plugin-actions {
      flex-direction: column;
    }
    
    .btn {
      width: 100%;
    }
  }
</style>

<main id="content">
  <%- include('../components/instance') %>
  
  <div class="plugin-manager-container">
    <div class="plugin-header">
      <h1 class="plugin-title">Plugins Manager</h1>
      <input 
        type="text" 
        id="searchInput" 
        placeholder="Search plugins..." 
        class="search-input"
        autocomplete="off"
      />
    </div>
    
    <div class="plugin-grid" id="pluginContainer">
      <div class="loading-container" id="loading">
        <div class="loading-spinner"></div>
        <div class="loading-text">Loading plugins...</div>
      </div>
    </div>
    
    <div class="pagination">
      <button id="loadMore" class="load-more-btn" disabled>
        Load More Plugins
      </button>
    </div>
  </div>
  
  <!-- Installation Modal -->
  <div class="modal-overlay" id="installModal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Installing Plugin</h3>
        <button class="modal-close" id="modalCloseBtn">&times;</button>
      </div>
      <div class="modal-body">
        <div class="progress-container">
          <div class="progress-bar">
            <div class="progress-fill" id="installProgress"></div>
          </div>
          <div class="progress-text" id="installStatus">Preparing installation...</div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <svg class="toast-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
      <polyline points="22 4 12 14.01 9 11.01"></polyline>
    </svg>
    <span id="toastMessage">Plugin installed successfully</span>
  </div>
</main>

<script>
  // Configuration
  const API_URL = "https://api.spiget.org/v2/resources/free";
  const ITEMS_PER_PAGE = 12;
  let currentPage = 0;
  let allPlugins = [];
  let isLoading = false;
  let hasMore = true;

  // DOM Elements
  const pluginContainer = document.getElementById("pluginContainer");
  const searchInput = document.getElementById("searchInput");
  const loadMoreBtn = document.getElementById("loadMore");
  const installModal = document.getElementById("installModal");
  const modalCloseBtn = document.getElementById("modalCloseBtn");
  const installProgress = document.getElementById("installProgress");
  const installStatus = document.getElementById("installStatus");
  const toast = document.getElementById("toast");
  const toastMessage = document.getElementById("toastMessage");

  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    fetchPlugins();
    
    // Setup event listeners
    searchInput.addEventListener('input', debounce(filterPlugins, 300));
    loadMoreBtn.addEventListener('click', fetchPlugins);
    modalCloseBtn.addEventListener('click', closeModal);
    
    // Close modal when clicking outside
    installModal.addEventListener('click', (e) => {
      if (e.target === installModal) closeModal();
    });
  });

  // Fetch plugins from API
  async function fetchPlugins() {
    if (isLoading || !hasMore) return;
    
    isLoading = true;
    currentPage++;
    
    try {
      showLoading();
      
      const response = await fetch(
        `${API_URL}?size=${ITEMS_PER_PAGE}&page=${currentPage}&sort=-downloads`
      );
      
      if (!response.ok) throw new Error('Failed to fetch plugins');
      
      const plugins = await response.json();
      
      if (!Array.isArray(plugins)) {
        throw new Error('Invalid response format');
      }
      
      // Check if we've reached the end
      if (plugins.length < ITEMS_PER_PAGE) {
        hasMore = false;
        loadMoreBtn.disabled = true;
        loadMoreBtn.textContent = 'No more plugins';
      }
      
      // Add to our collection
      allPlugins = [...allPlugins, ...plugins];
      
      // Render the plugins
      renderPlugins(allPlugins);
      
    } catch (error) {
      console.error('Error fetching plugins:', error);
      showToast('Failed to load plugins. Please try again.', 'error');
      hasMore = false;
      loadMoreBtn.disabled = true;
      loadMoreBtn.textContent = 'Error loading plugins';
    } finally {
      isLoading = false;
      hideLoading();
    }
  }

  // Render plugins to the DOM
  function renderPlugins(plugins) {
    if (!plugins.length && currentPage > 1) {
      // Only show empty state if we've already tried loading
      pluginContainer.innerHTML = `
        <div class="empty-state">
          <div class="empty-icon">??</div>
          <h3>No plugins found</h3>
          <p>Try adjusting your search or check your connection</p>
        </div>
      `;
      return;
    }
    
    pluginContainer.innerHTML = plugins.map(plugin => `
      <div class="plugin-card" data-id="${plugin.id}">
        <div class="plugin-card-content">
          <div class="plugin-card-header">
            ${plugin.icon && plugin.icon.data ? `
              <img src="data:image/jpeg;base64,${plugin.icon.data}" 
                   alt="${plugin.name} icon" 
                   class="plugin-icon"
                   onerror="this.onerror=null;this.src='https://via.placeholder.com/48/1e293b/94a3b8?text=??'">
            ` : `
              <div class="plugin-icon" style="background: #1e293b; display: flex; align-items: center; justify-content: center;">
                ??
              </div>
            `}
            <div>
              <h3 class="plugin-name">${escapeHtml(plugin.name)}</h3>
              <p class="plugin-author">by ${plugin.author ? escapeHtml(plugin.author.name) : 'Unknown'}</p>
            </div>
          </div>
          
          <div class="plugin-meta">
            <span class="plugin-rating">
              ★ ${plugin.rating ? plugin.rating.average.toFixed(1) : 'N/A'}
            </span>
            <span class="plugin-downloads">
              ↓ ${plugin.downloads ? formatNumber(plugin.downloads) : '0'}
            </span>
          </div>
          
          <p class="plugin-description">
            ${plugin.description ? truncate(escapeHtml(plugin.description), 120) : 'No description available.'}
          </p>
          
          <div class="plugin-actions">
            <button onclick="installPlugin(event, ${plugin.id}, '${escapeHtml(plugin.name)}')" 
                    class="btn btn-primary">
              <svg class="btn-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                <polyline points="7 10 12 15 17 10"></polyline>
                <line x1="12" y1="15" x2="12" y2="3"></line>
              </svg>
              Install
            </button>
            <a href="https://www.spigotmc.org/resources/${plugin.id}" 
               target="_blank" 
               rel="noopener noreferrer"
               class="btn btn-secondary">
              <svg class="btn-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="12"></line>
                <line x1="12" y1="16" x2="12.01" y2="16"></line>
              </svg>
              Details
            </a>
          </div>
        </div>
      </div>
    `).join('');
  }

  // Filter plugins based on search input
  function filterPlugins() {
    const searchTerm = searchInput.value.trim().toLowerCase();
    
    if (!searchTerm) {
      renderPlugins(allPlugins);
      return;
    }
    
    const filtered = allPlugins.filter(plugin => 
      (plugin.name && plugin.name.toLowerCase().includes(searchTerm)) ||
      (plugin.author && plugin.author.name && plugin.author.name.toLowerCase().includes(searchTerm)) ||
      (plugin.description && plugin.description.toLowerCase().includes(searchTerm))
    );
    
    renderPlugins(filtered);
  }

  // Install plugin handler
  async function installPlugin(event, pluginId, pluginName) {
    event.preventDefault();
    event.stopPropagation();
    
    try {
      // Show installation modal
      showModal(`Installing ${pluginName}`);
      
      // Simulate progress (in a real app, you'd have actual progress events)
      updateProgress(10, 'Starting download...');
      await delay(500);
      
      updateProgress(30, 'Downloading plugin...');
      
      // In a real implementation, you would make an actual API call here
      const downloadUrl = `https://api.spiget.org/v2/resources/${pluginId}/download`;
      const redirectUrl = `/instance/<%= req.params.id %>/plugins/download?downloadUrl=${encodeURIComponent(downloadUrl)}&plugin_name=${encodeURIComponent(pluginName)}`;
      
      updateProgress(70, 'Installing to server...');
      await delay(800);
      
      updateProgress(90, 'Finalizing installation...');
      await delay(300);
      
      updateProgress(100, 'Installation complete!');
      
      // Show success message
      showToast(`Successfully installed ${pluginName}`, 'success');
      
      // Redirect to download handler after a brief delay
      setTimeout(() => {
        window.location.href = redirectUrl;
      }, 1500);
      
    } catch (error) {
      console.error('Error installing plugin:', error);
      updateProgress(0, 'Installation failed');
      showToast(`Failed to install ${pluginName}`, 'error');
    } finally {
      setTimeout(closeModal, 2000);
    }
  }

  // Helper function to show loading state
  function showLoading() {
    const loading = document.getElementById('loading');
    if (loading) loading.style.display = 'flex';
    loadMoreBtn.disabled = true;
  }

  // Helper function to hide loading state
  function hideLoading() {
    const loading = document.getElementById('loading');
    if (loading) loading.style.display = 'none';
    if (hasMore) {
      loadMoreBtn.disabled = false;
    }
  }

  // Show modal with progress
  function showModal(title) {
    document.querySelector('.modal-title').textContent = title;
    installModal.classList.add('active');
    installProgress.style.width = '0%';
    installStatus.textContent = 'Starting...';
  }

  // Update progress bar and status
  function updateProgress(percent, message) {
    installProgress.style.width = `${percent}%`;
    installStatus.textContent = message;
  }

  // Close modal
  function closeModal() {
    installModal.classList.remove('active');
  }

  // Show toast notification
  function showToast(message, type = 'success') {
    toastMessage.textContent = message;
    
    // Set color based on type
    switch (type) {
      case 'error':
        toast.style.backgroundColor = 'var(--error-color)';
        break;
      case 'warning':
        toast.style.backgroundColor = 'var(--warning-color)';
        break;
      default:
        toast.style.backgroundColor = 'var(--success-color)';
    }
    
    toast.classList.add('show');
    
    // Auto-hide after 3 seconds
    setTimeout(() => {
      toast.classList.remove('show');
    }, 3000);
  }

  // Utility function to debounce rapid events
  function debounce(func, wait) {
    let timeout;
    return function() {
      const context = this;
      const args = arguments;
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(context, args), wait);
    };
  }

  // Utility function to delay execution
  function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Utility function to escape HTML
  function escapeHtml(unsafe) {
    if (!unsafe) return '';
    return unsafe
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }

  // Utility function to truncate text
  function truncate(text, length) {
    if (!text) return '';
    if (text.length <= length) return text;
    return text.substring(0, length) + '...';
  }

  // Utility function to format large numbers
  function formatNumber(num) {
    if (!num) return '0';
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }
</script>

<%- include('../components/footer') %>
