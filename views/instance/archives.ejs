<%- include('../components/template') %>
<main id="content" class="min-h-screen text-white">
   
   <%- include('../components/instance') %>

   <div class="bg-white/5 rounded-xl p-6 mb-6 backdrop-blur-sm border border-white/10">
    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
        <div>
            <h2 class="text-2xl font-bold">Backups</h2>
            <p class="text-sm text-white/60 mt-1">Protect your server data with regular backups</p>
        </div>
        <button onclick="createArchive()" class="bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-2 px-5 rounded-lg hover:scale-[0.98] transition flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            Create Backup
        </button>
    </div>
    
    <% if (archives.length === 0) { %>
        <div class="text-center py-12 border-2 border-dashed border-white/10 rounded-xl">
            <div class="w-20 h-20 mx-auto mb-5 bg-indigo-900/20 rounded-full flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-10 h-10 text-indigo-400">
                    <path stroke-linecap="round" stroke-linejoin="round" d="m20.25 7.5-.625 10.632a2.25 2.25 0 0 1-2.247 2.118H6.622a2.25 2.25 0 0 1-2.247-2.118L3.75 7.5m8.25 3v6.75m0 0-3-3m3 3 3-3M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125Z" />
                </svg>
            </div>
            <h3 class="text-xl font-semibold text-white mb-2">No Backups Found</h3>
            <p class="text-white/60 max-w-md mx-auto">Your server backups will appear here. Create your first backup to protect your data.</p>
        </div>
    <% } else { %>
        <div class="overflow-x-auto">
            <table class="w-full">
                <thead class="text-left text-white/60 border-b border-white/10">
                    <tr>
                        <th class="pb-3 pl-2">Backup Name</th>
                        <th class="pb-3">Size</th>
                        <th class="pb-3">Last Updated</th>
                        <th class="pb-3 pr-2 text-right">Actions</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-white/5">
                    <% archives.forEach(function(archive) { %>
                        <%
                            let fullName = archive.name.replace(req.params.id + '-', '');
                            let [hash, ...rest] = fullName.split('-');
                            let shortHash = hash.slice(0, 7) + '...' + hash.slice(-4);
                            let shortName = [shortHash, ...rest].join('-');
                        %>
                        <tr class="hover:bg-white/5 transition-colors">
                            <td class="py-4 pl-2">
                                <div class="flex items-center gap-3">
                                    <div class="bg-indigo-900/20 p-2 rounded-lg">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-indigo-400">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="m20.25 7.5-.625 10.632a2.25 2.25 0 0 1-2.247 2.118H6.622a2.25 2.25 0 0 1-2.247-2.118L3.75 7.5m8.25 3v6.75m0 0-3-3m3 3 3-3M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125Z" />
                                        </svg>
                                    </div>
                                    <div>
                                        <div class="font-medium"><%= shortName %></div>
                                        <div class="text-xs text-white/50">Full name: <%= fullName %></div>
                                    </div>
                                </div>
                            </td>
                            <td class="py-4 text-white/80"><%= archive.size %></td>
                            <td class="py-4 text-white/80"><%= archive.lastUpdated %></td>
                            <td class="py-4 pr-2">
                                <div class="flex justify-end gap-2">
                                    <button onclick="downloadArchive('<%= archive.name %>')" class="bg-green-600 hover:bg-green-700 text-white font-medium py-1.5 px-4 rounded-lg text-sm flex items-center gap-1 hover:scale-[0.98] transition">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                                        </svg>
                                        Download
                                    </button>
                                    <button onclick="restoreArchive('<%= archive.name %>')" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-1.5 px-4 rounded-lg text-sm flex items-center gap-1 hover:scale-[0.98] transition">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                                        </svg>
                                        Restore
                                    </button>
                                    <button onclick="confirmDelete('<%= archive.name %>')" class="bg-red-600 hover:bg-red-700 text-white font-medium py-1.5 px-4 rounded-lg text-sm flex items-center gap-1 hover:scale-[0.98] transition">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                        </svg>
                                        Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
    <% } %>
</div>

</main>
<%- include('../components/footer') %>

<!-- Loading Modal -->
<div id="loadingModal" class="fixed inset-0 bg-black/80 z-50 flex items-center justify-center opacity-0 pointer-events-none transition-opacity duration-200">
    <div class="bg-gray-800 rounded-xl p-6 max-w-md w-full mx-4 border border-white/10 transform scale-95 transition-transform duration-200 backdrop-blur-sm">
        <div class="flex items-center gap-4 mb-4">
            <div class="animate-spin">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
            </div>
            <h2 class="text-xl font-semibold text-white" id="loadingTitle">Creating Backup</h2>
        </div>
        <div class="mb-4">
            <div class="w-full bg-gray-700 rounded-full h-2.5 overflow-hidden">
                <div id="loadingBar" class="bg-indigo-500 h-2.5 rounded-full transition-all duration-300" style="width: 0%"></div>
            </div>
        </div>
        <p id="loadingMessage" class="text-center text-white/70">Initializing backup process...</p>
    </div>
</div>

<!-- Confirm Delete Modal -->
<div id="confirmDeleteModal" class="fixed inset-0 bg-black/80 z-50 flex items-center justify-center opacity-0 pointer-events-none transition-opacity duration-200">
    <div class="bg-gray-800 rounded-xl p-6 max-w-md w-full mx-4 border border-white/10 transform scale-95 transition-transform duration-200 backdrop-blur-sm">
        <div class="flex items-center gap-3 mb-4">
            <div class="bg-red-900/30 p-2 rounded-lg">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
            </div>
            <h3 class="text-xl font-semibold text-white">Confirm Deletion</h3>
        </div>
        <p class="mb-6 text-white/80">Are you sure you want to delete this backup? This action cannot be undone.</p>
        <div class="flex justify-end gap-3">
            <button id="cancelDelete" class="bg-gray-700 hover:bg-gray-600 text-white font-medium py-2 px-5 rounded-lg transition">
                Cancel
            </button>
            <button id="confirmDelete" class="bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-5 rounded-lg transition flex items-center gap-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
                Delete Backup
            </button>
        </div>
    </div>
</div>

<script>
// Current archive to be deleted
let currentArchiveToDelete = null;

// Show loading modal with animation
function showLoadingModal(title, message) {
    const modal = document.getElementById('loadingModal');
    const titleElement = document.getElementById('loadingTitle');
    const messageElement = document.getElementById('loadingMessage');
    
    titleElement.textContent = title;
    messageElement.textContent = message;
    document.getElementById('loadingBar').style.width = '0%';
    
    modal.classList.remove('opacity-0', 'pointer-events-none');
    modal.classList.add('opacity-100', 'pointer-events-auto');
    
    setTimeout(() => {
        document.querySelector('#loadingModal div').classList.remove('scale-95');
        document.querySelector('#loadingModal div').classList.add('scale-100');
    }, 10);
}

// Hide loading modal with animation
function hideLoadingModal() {
    const modal = document.getElementById('loadingModal');
    
    document.querySelector('#loadingModal div').classList.remove('scale-100');
    document.querySelector('#loadingModal div').classList.add('scale-95');
    
    setTimeout(() => {
        modal.classList.remove('opacity-100', 'pointer-events-auto');
        modal.classList.add('opacity-0', 'pointer-events-none');
    }, 200);
}

// Update loading progress
function updateLoadingProgress(percent, message) {
    document.getElementById('loadingBar').style.width = `${percent}%`;
    document.getElementById('loadingMessage').textContent = message;
}

// Show delete confirmation modal
function confirmDelete(archiveName) {
    currentArchiveToDelete = archiveName;
    const modal = document.getElementById('confirmDeleteModal');
    
    modal.classList.remove('opacity-0', 'pointer-events-none');
    modal.classList.add('opacity-100', 'pointer-events-auto');
    
    setTimeout(() => {
        document.querySelector('#confirmDeleteModal div').classList.remove('scale-95');
        document.querySelector('#confirmDeleteModal div').classList.add('scale-100');
    }, 10);
}

// Hide delete confirmation modal
function hideDeleteModal() {
    const modal = document.getElementById('confirmDeleteModal');
    
    document.querySelector('#confirmDeleteModal div').classList.remove('scale-100');
    document.querySelector('#confirmDeleteModal div').classList.add('scale-95');
    
    setTimeout(() => {
        modal.classList.remove('opacity-100', 'pointer-events-auto');
        modal.classList.add('opacity-0', 'pointer-events-none');
        currentArchiveToDelete = null;
    }, 200);
}

// Setup event listeners
document.addEventListener('DOMContentLoaded', () => {
    // Delete modal handlers
    document.getElementById('cancelDelete').addEventListener('click', hideDeleteModal);
    document.getElementById('confirmDelete').addEventListener('click', () => {
        if (currentArchiveToDelete) {
            deleteArchive(currentArchiveToDelete);
            hideDeleteModal();
        }
    });
});

async function createArchive() {
    const instanceId = '<%= req.params.id %>';
    
    showLoadingModal('Creating Backup', 'Initializing backup process...');
    
    try {
        // Simulate progress (replace with actual progress updates from your backend)
        updateLoadingProgress(20, 'Collecting server files...');
        await new Promise(resolve => setTimeout(resolve, 800));
        
        updateLoadingProgress(50, 'Compressing data...');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        updateLoadingProgress(80, 'Uploading backup...');
        
        const response = await fetch(`/instance/${instanceId}/archives/create`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            updateLoadingProgress(100, 'Backup created successfully!');
            await new Promise(resolve => setTimeout(resolve, 800));
            hideLoadingModal();
            
            // Show success notification
            alert('Backup created successfully!');
            window.location.reload();
        } else {
            const errorData = await response.json();
            hideLoadingModal();
            alert('Error creating archive: ' + (errorData.message || response.statusText));
        }
    } catch (error) {
        hideLoadingModal();
        console.error('Error during POST request:', error);
        alert('An error occurred while creating the backup: ' + error.message);
    }
}

async function downloadArchive(archiveName) {
    const instanceId = '<%= req.params.id %>';
    
    showLoadingModal('Preparing Download', 'Getting backup ready for download...');
    
    try {
        updateLoadingProgress(30, 'Preparing backup file...');
        
        // Create a temporary link to trigger the download
        const downloadLink = document.createElement('a');
        downloadLink.href = `/archive/${instanceId}/archives/download/${encodeURIComponent(archiveName)}`;
        downloadLink.download = archiveName;
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
        
        updateLoadingProgress(100, 'Download started!');
        await new Promise(resolve => setTimeout(resolve, 800));
        hideLoadingModal();
    } catch (error) {
        hideLoadingModal();
        console.error('Error downloading archive:', error);
        alert('An error occurred while downloading the backup: ' + error.message);
    }
}

async function restoreArchive(archiveName) {
    const instanceId = '<%= req.params.id %>';
    
    if (!confirm(`Are you sure you want to restore from backup "${archiveName}"? This will overwrite your current server data.`)) {
        return;
    }
    
    showLoadingModal('Restoring Backup', 'Preparing to restore your server...');
    
    try {
        updateLoadingProgress(30, 'Downloading backup...');
        await new Promise(resolve => setTimeout(resolve, 800));
        
        updateLoadingProgress(60, 'Extracting files...');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const response = await fetch(`/instance/${instanceId}/archives/rollback/${encodeURIComponent(archiveName)}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ archivename: archiveName })
        });
        
        if (response.ok) {
            updateLoadingProgress(100, 'Restoration complete!');
            await new Promise(resolve => setTimeout(resolve, 800));
            hideLoadingModal();
            
            alert('Server restored successfully!');
            window.location.reload();
        } else {
            const errorData = await response.json();
            hideLoadingModal();
            alert('Error restoring archive: ' + (errorData.message || response.statusText));
        }
    } catch (error) {
        hideLoadingModal();
        console.error('Error during POST request:', error);
        alert('An error occurred while restoring the backup: ' + error.message);
    }
}

async function deleteArchive(archiveName) {
    const instanceId = '<%= req.params.id %>';
    
    showLoadingModal('Deleting Backup', 'Removing backup files...');
    
    try {
        const response = await fetch(`/instance/${instanceId}/archives/delete/${encodeURIComponent(archiveName)}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ archivename: archiveName })
        });
        
        if (response.ok) {
            updateLoadingProgress(100, 'Backup deleted successfully!');
            await new Promise(resolve => setTimeout(resolve, 800));
            hideLoadingModal();
            
            alert('Backup deleted successfully!');
            window.location.reload();
        } else {
            const errorData = await response.json();
            hideLoadingModal();
            alert('Error deleting archive: ' + (errorData.message || response.statusText));
        }
    } catch (error) {
        hideLoadingModal();
        console.error('Error during POST request:', error);
        alert('An error occurred while deleting the backup: ' + error.message);
    }
}
</script>

<style>
/* Smooth transitions for all interactive elements */
button, a {
    transition: all 0.2s ease;
}

/* Better table responsiveness */
@media (max-width: 768px) {
    table {
        display: block;
        overflow-x: auto;
        white-space: nowrap;
    }
}

/* Modal animations */
#loadingModal, #confirmDeleteModal {
    transition: opacity 0.2s ease;
}

#loadingModal div, #confirmDeleteModal div {
    transition: transform 0.2s ease;
}

/* Loading spinner animation */
@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

.animate-spin {
    animation: spin 1s linear infinite;
}

/* Better button spacing on mobile */
@media (max-width: 640px) {
    .flex.justify-end.gap-2 {
        flex-wrap: wrap;
        justify-content: flex-start;
    }
    .flex.justify-end.gap-2 button {
        margin-bottom: 0.5rem;
    }
}
</style>